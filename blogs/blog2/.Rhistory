inner_join(df_prev, c("raceYear", "State", "Area")) %>%
mutate(UnempDiff = Unemployed_prct - UnempPrev, PctDiff = DemPct - PctPrev) %>%
select(DemPct, PctPrev, PctDiff, UnempDiff, UnempPrev, Unemployed_prct, DemIncumbent) %>%
drop_na()
p3 = df %>% ggplot(aes(Predicted2, DemPct)) +
geom_point() +
geom_abline(slope=1, intercept=0, lty=2) +
xlab("Q8-Q7 Change in Statewide Unemployment Rate (U)") +
ylab("Vote Share Achieved by Democrats (D)") +
ggtitle("D = 46 + 0.61 U")
p4 = df %>% ggplot(aes(Predicted2 - DemPct)) +
geom_histogram(aes(y = ..density..), binwidth=4) +
xlab("Residual") +
ylab("Density") +
stat_function(fun = function(x) dnorm(x, 0, summary(model2)$sigma)) +
ggtitle("Histogram of Residuals")
grid.arrange(p3, p4, ncol=2)
p3 = df %>% ggplot(aes(Predicted2, DemPct)) +
geom_point() +
geom_abline(slope=1, intercept=0, lty=2) +
xlab("Q8-Q7 Change in Statewide Unemployment Rate (U)") +
ylab("Vote Share Achieved by Democrats (D)") +
ggtitle("D = 46 + 0.61 U")
p4 = df %>% ggplot(aes(Predicted2 - DemPct)) +
geom_histogram(aes(y = ..density..), binwidth=4) +
xlab("Residual") +
ylab("Density") +
stat_function(fun = function(x) dnorm(x, 0, summary(model2)$sigma)) +
ggtitle("Histogram of Residuals")
grid.arrange(p3, p4, ncol=2)
grid.arrange(p3, p4, ncol=2)
model2 = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, df)
df$Predicted2 = model2$fitted.values
summary(model2)
mses = replicate(10000, {
in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
in_sample = df[in_sample_inds, ]
out_sample = df[-in_sample_inds, ]
mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
preds = predict(mod, out_sample)
mean((preds - out_sample$DemPct) ** 2)
})
mses
mean(mses)
sqrt(mean(mses))
mean(sqrt(mses))
summary(model2)
unemp
df
tail(df)
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo=FALSE, fig.align="center")
knitr::opts_knit$set(root.dir="~/Desktop/GOV1347.nosync")
library(tidyverse)
library(gridExtra)
library(usmap)
today = read_csv("data/unemployment_state_monthly.csv") #%>%
filter(Year == Month == 10) %>%
tail(today)
votes
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), ("Year" = "raceYear", "State and area" = "State"))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), c("Year" = "raceYear", "State and area" = "State"))
today
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), c("Year" = "raceYear", "State and area" = "State"))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) #%>%
#inner_join(filter(votes, raceYear == 2020), c("Year" = "raceYear", "State and area" = "State"))
today
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), c("State and area" = "State"))
today
nrow(today)
filter(votes, raceYear == 2020)
filter(votes, raceYear == 2020)$State
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote
votes = read_csv("data/house party vote share by district 1948-2020.csv") #%>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016))
filter(votes, raceYear == 2020) %>% view()
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), c("State and area" = "State"))
today
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), c("State and area" = "State"))
today
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo=FALSE, fig.align="center")
knitr::opts_knit$set(root.dir="~/Desktop/GOV1347.nosync")
library(tidyverse)
library(gridExtra)
library(usmap)
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016))
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Join the data all together
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(votes, raceYear == 2020), c("State and area" = "State"))
today
predict(model2, today)
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State"))
states = us_map()
plot_usmap(data=df, regions="states", values=colname) + theme_void() + theme(plot.margin=unit(c(0,0.5,0,0.5),"cm"))
predict(model2, today)
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = DemPresident * UnempQ4)
predict(model2, today)
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4)
states = us_map()
plot_usmap(data=df, regions="states", values=colname) + theme_void() + theme(plot.margin=unit(c(0,0.5,0,0.5),"cm"))
predict(model2, today)
predict(model2, today, interval="prediction")
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4)
fitted_today = predict(model2, today, interval="prediction")
states = us_map()
plot_usmap(data=fitted_today, regions="states", values=fit) +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(0, 100))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4)
fitted_today = predict(model2, today, interval="prediction") %>% data.frame()
states = us_map()
plot_usmap(data=fitted_today, regions="states", values=fit) +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(0, 100))
fitted_today
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4)
fitted_today = predict(model2, today, interval="prediction") %>% data.frame()
states = us_map()
plot_usmap(data=fitted_today, regions="states", values="fit") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(0, 100))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4)
fitted_today = predict(model2, today, interval="prediction") %>% data.frame()
today$Predicted = fitted_today$fit
states = us_map()
plot_usmap(data=fitted_today, regions="states", values="Predicted") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(0, 100))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4)
today$Predicted = data.frame(predict(model2, today, interval="prediction"))$fit
states = us_map()
plot_usmap(data=today, regions="states", values="Predicted") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(0, 100))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4) %>%
rename(state = `State and area`)
today$Predicted = data.frame(predict(model2, today, interval="prediction"))$fit
states = us_map()
plot_usmap(data=today, regions="states", values="Predicted") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(0, 100))
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4) %>%
rename(state = `State and area`)
today$Predicted = data.frame(predict(model2, today, interval="prediction"))$fit
states = us_map()
plot_usmap(data=today, regions="states", values="Predicted") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes")
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4) %>%
rename(state = `State and area`)
today$Predicted = data.frame(predict(model2, today, interval="prediction"))$fit
states = us_map()
plot_usmap(data=today, regions="states", values="Predicted") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(30, 70))
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016))
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo=FALSE, fig.align="center")
knitr::opts_knit$set(root.dir="~/Desktop/GOV1347.nosync")
library(tidyverse)
library(gridExtra)
library(usmap)
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016))
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
model1a = lm(DemPct ~ UnempPctChange, df)
df$Predicted1a = model1a$fitted.values
summary(model1a)
model1b = lm(DemPct ~ UnempQ4, df)
df$Predicted1b = model1b$fitted.values
summary(model1b)
model2 = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, df)
df$Predicted2 = model2$fitted.values
summary(model2)
predict(model2, today, interval="prediction")
print(data.frame(select(today, state, LowerBound, Predicted, UpperBound)))
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo=FALSE, fig.align="center")
knitr::opts_knit$set(root.dir="~/Desktop/GOV1347.nosync")
library(tidyverse)
library(gridExtra)
library(usmap)
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016)) %>%
filter(raceYear %% 4 == 2)
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
# Linear model using unemplpyment percent change
model1a = lm(DemPct ~ UnempPctChange, df)
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo=FALSE, fig.align="center")
knitr::opts_knit$set(root.dir="~/Desktop/GOV1347.nosync")
library(tidyverse)
library(gridExtra)
library(usmap)
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016)) %>%
filter(raceYear %% 4 == 2)
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
# Linear model using unemplpyment percent change
model1a = lm(DemPct ~ UnempPctChange, df)
df
votes
f
df
votes$raceYear
votes$raceYear %>% unique()
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016)) %>%
filter(raceYear %% 4 == 2)
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 4) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
df
# Linear model using unemplpyment percent change
model1a = lm(DemPct ~ UnempPctChange, df)
df$Predicted1a = model1a$fitted.values
summary(model1a)
# Linear model using unemployment absolute level
model1b = lm(DemPct ~ UnempQ4, df)
df$Predicted1b = model1b$fitted.values
summary(model1b)
# Scatterplot for the first model, with regression line and prediction bands
p1 = df %>% ggplot(aes(UnempPctChange, DemPct)) +
geom_point() +
geom_smooth(method="lm", formula = y ~ x) +
geom_hline(yintercept=50, lty=2) +
geom_vline(xintercept=0, lty=2) +
xlab("Q8-Q7 Change in Statewide Unemployment Rate (U)") +
ylab("Vote Share Achieved by Democrats (D)") +
ggtitle("D = 49.7 + 0.066 U")
# Scatterplot for the second model, with regression line and prediction bands
p2 = df %>% ggplot(aes(UnempQ4, DemPct)) +
geom_point() +
geom_smooth(method="lm", formula = y ~ x) +
geom_hline(yintercept=50, lty=2) +
geom_vline(xintercept=0, lty=2) +
xlab("Q8 Statewide Unemployment Rate (U)") +
ylab("Vote Share Achieved by Democrats (D)") +
ggtitle("D = 46.0 + 0.61 U")
grid.arrange(p1, p2, ncol=2)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
mses = replicate(10000, {
in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
in_sample = df[in_sample_inds, ]
out_sample = df[-in_sample_inds, ]
mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
preds = predict(mod, out_sample)
mean((preds - out_sample$DemPct) ** 2)
})
mse = mean(mses)
rmse = sqrt(mse)
# Scatterplot of predicted vs. actual vote share
p3 = df %>% ggplot(aes(Predicted2, DemPct)) +
geom_point() +
geom_abline(slope=1, intercept=0, lty=2) +
xlab("Predicted Vote Share Achieved by Democrats") +
ylab("Actual Vote Share Achieved by Democrats") +
ggtitle("(vote share) = \n11.1 + 0.77 (previous vote share) + \n(0.22 if G.O.P. president else -0.22) (Q8 unemp.)")
# Histogram of the residual with overlayed Normal density curve
p4 = df %>% ggplot(aes(Predicted2 - DemPct)) +
geom_histogram(aes(y = ..density..), binwidth=4) +
xlab("Residual") +
ylab("Density") +
stat_function(fun = function(x) dnorm(x, 0, summary(model2)$sigma)) +
ggtitle("Histogram of Residuals")
grid.arrange(p3, p4, ncol=2)
