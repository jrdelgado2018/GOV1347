mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Get the poll data, filter for polls within 2 months of the election, and take simple average of results
polls = read_csv("data/polls_df.csv") %>%
filter(emonth %in% c(10, 11)) %>%
mutate(isDemocrat = party == "D") %>%
group_by(year) %>%
summarize(D = sum(support * isDemocrat) / sum(isDemocrat), R = sum(support * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
inner_join(polls, c("raceYear" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4)
df
tail(df)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp + DemPolls, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
head(df)
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016))
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Get the poll data, filter for polls within 2 months of the election, and take simple average of results
polls = read_csv("data/polls_df.csv") %>%
filter(emonth %in% c(10, 11)) %>%
mutate(isDemocrat = party == "D") %>%
group_by(year) %>%
summarize(D = sum(support * isDemocrat) / sum(isDemocrat), R = sum(support * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
inner_join(polls, c("raceYear" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4,
DemTimesPolls = DemPresident * DemPolls)
head(df)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + UnempQ4 + UnempQ3 + DemTimesUnemp + DemPolls + DemTimesPolls, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp + DemPolls + DemTimesPolls, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempQ4, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempQ4 + DemTimesUnemp, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + DemPresident, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempQ4 + UnempQ3, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempPctChange, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempQ4 + UnempQ3, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempPctChange, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
#mses = replicate(10000, {
#  in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
#  in_sample = df[in_sample_inds, ]
#  out_sample = df[-in_sample_inds, ]
#  mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
#  preds = predict(mod, out_sample)
#  mean((preds - out_sample$DemPct) ** 2)
#})
mse = mean(mses)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempPctChange * DemPresident, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
mses = replicate(10000, {
in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
in_sample = df[in_sample_inds, ]
out_sample = df[-in_sample_inds, ]
mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
preds = predict(mod, out_sample)
mean((preds - out_sample$DemPct) ** 2)
})
mse = mean(mses)
rmse = sqrt(mse)
# Read in the voting data, filter for elections where there was a Democrat and a Republican and third parties were < 10% of the vote,
# calculate the statewide vote percent that Democrats won, and create a column for the sitting president being a Democrat
votes = read_csv("data/house party vote share by district 1948-2020.csv") %>%
filter(ThirdVotesTotalPercent < 10 & !is.na(RepCandidate) & !is.na(DemCandidate)) %>%
group_by(raceYear, State) %>%
summarize(DemPct = 100 * sum(DemVotes) / (sum(DemVotes) + sum(RepVotes)), .groups = 'drop') %>%
mutate(DemPresident = raceYear %in% c(1978, 1980, 1994, 1996, 1998, 2000, 2010, 2012, 2014, 2016))
# Create a dataframe with the relevant variables from the prior election (will need this later)
df_prev = votes %>%
rename(PctPrev = DemPct) %>%
mutate(raceYear = raceYear + 2) %>%
select(raceYear, State, PctPrev)
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 10) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3 = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 7) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
# Join the unemployment data together
unemp = inner_join(unemp_Q4, unemp_Q3, c("Year", "State and area"))
# Get the poll data, filter for polls within 2 months of the election, and take simple average of results
polls = read_csv("data/polls_df.csv") %>%
filter(emonth %in% c(10, 11)) %>%
mutate(isDemocrat = party == "D") %>%
group_by(year) %>%
summarize(D = sum(support * isDemocrat) / sum(isDemocrat), R = sum(support * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Join the data all together, calculating a couple of extra columns
df = votes %>%
inner_join(df_prev, c("raceYear", "State")) %>%
inner_join(unemp, c("raceYear" = "Year", "State" = "State and area")) %>%
inner_join(polls, c("raceYear" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4,
DemTimesPolls = DemPresident * DemPolls,
DemTimesPct = DemPresident * UnempPctChange)
# Model incorporating the previous vote share, the unemployment level, and whether a Democrat is the president
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempPctChange + DemTimesPct, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
mses = replicate(10000, {
in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
in_sample = df[in_sample_inds, ]
out_sample = df[-in_sample_inds, ]
mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
preds = predict(mod, out_sample)
mean((preds - out_sample$DemPct) ** 2)
})
mse = mean(mses)
rmse = sqrt(mse)
df
# Scatterplot of predicted vs. actual vote share
p3 = df %>% ggplot(aes(Predicted2, DemPct)) +
geom_point() +
geom_abline(slope=1, intercept=0, lty=2) +
xlab("Predicted Vote Share Achieved by Democrats") +
ylab("Actual Vote Share Achieved by Democrats") +
ggtitle("(vote share) = \n11.1 + 0.77 (previous vote share) + \n(0.22 if G.O.P. president else -0.22) (Q8 unemp.)")
# Histogram of the residual with overlayed Normal density curve
p4 = df %>% ggplot(aes(Predicted2 - DemPct)) +
geom_histogram(aes(y = ..density..), binwidth=4) +
xlab("Residual") +
ylab("Density") +
stat_function(fun = function(x) dnorm(x, 0, summary(model2)$sigma)) +
ggtitle("Histogram of Residuals")
grid.arrange(p3, p4, ncol=2)
summary(model2)
cor(df$UnempPctChange, df$UnempQ4)
cor(df$DemPolls, df$UnempQ4)
rmse
# Model incorporating the previous vote share, the unemployment level, and generic ballot polling
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempQ4, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
mses = replicate(10000, {
in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
in_sample = df[in_sample_inds, ]
out_sample = df[-in_sample_inds, ]
mod = lm(DemPct ~ PctPrev + UnempQ4 + DemTimesUnemp, in_sample)
preds = predict(mod, out_sample)
mean((preds - out_sample$DemPct) ** 2)
})
mse = mean(mses)
rmse = sqrt(mse)
rmse
# Model incorporating the previous vote share, the unemployment level, and generic ballot polling
model2 = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempPctChange + DemTimesPct, df)
df$Predicted2 = model2$fitted.values
summary(model2)
# Bootstrapped estimate of the MSE using cross-validation
mses = replicate(10000, {
in_sample_inds = sample.int(n=nrow(df), size=floor(0.75*nrow(df)), replace=FALSE)
in_sample = df[in_sample_inds, ]
out_sample = df[-in_sample_inds, ]
mod = lm(DemPct ~ PctPrev + DemPolls + DemTimesPolls + UnempPctChange + DemTimesPct, in_sample)
preds = predict(mod, out_sample)
mean((preds - out_sample$DemPct) ** 2)
})
mse = mean(mses)
rmse = sqrt(mse)
rmse
polls
tail(polls)
# Get the polls for today
polls_today = read_csv("data/538_generic_ballot_averages_2018-2022.csv") %>%
filter(month == 9 & cycle == 2022) %>%
mutate(isDemocrat = candidate == "Democrats") %>%
group_by(cycle) %>%
summarize(D = sum(pct_estimate * isDemocrat) / sum(isDemocrat), R = sum(pct_estimate * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Get the data specifically for today
today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Year == 2022 & Month == 5) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4) %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
mutate(DemTimesUnemp = UnempQ4) %>%
rename(state = `State and area`) %>%
inner_join(polls_today, c("raceYear" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesUnemp = DemPresident * UnempQ4,
DemTimesPolls = DemPresident * DemPolls,
DemTimesPct = DemPresident * UnempPctChange)
polls_today
# Get the polls for today
polls_today = read_csv("data/538_generic_ballot_averages_2018-2022.csv") %>%
filter(month == 9 & cycle == 2022) %>%
mutate(isDemocrat = candidate == "Democrats") %>%
group_by(cycle) %>%
summarize(D = sum(pct_estimate * isDemocrat) / sum(isDemocrat), R = sum(pct_estimate * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 5 & Year == 2022) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 2 & Year == 2022) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
unemp_today = inner_join(unemp_Q4_today, unemp_Q3_today, c("Year", "State and area"))
# Get the data specifically for today
today = unemp_today %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
rename(state = `State and area`) %>%
inner_join(polls_today, c("raceYear" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesPct = UnempPctChange,
DemTimesPolls = DemPolls)
unemp_today
# Get the polls for today
polls_today = read_csv("data/538_generic_ballot_averages_2018-2022.csv") %>%
filter(month == 9 & cycle == 2022) %>%
mutate(isDemocrat = candidate == "Democrats") %>%
group_by(cycle) %>%
summarize(D = sum(pct_estimate * isDemocrat) / sum(isDemocrat), R = sum(pct_estimate * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 5 & Year == 2022) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 2 & Year == 2022) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
unemp_today = inner_join(unemp_Q4_today, unemp_Q3_today, c("Year", "State and area"))
# Get the data specifically for today
today = unemp_today %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
rename(state = `State and area`)# %>%
inner_join(polls_today, c("raceYear" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesPct = UnempPctChange,
DemTimesPolls = DemPolls)
today
# Get the polls for today
polls_today = read_csv("data/538_generic_ballot_averages_2018-2022.csv") %>%
filter(month == 9 & cycle == 2022) %>%
mutate(isDemocrat = candidate == "Democrats") %>%
group_by(cycle) %>%
summarize(D = sum(pct_estimate * isDemocrat) / sum(isDemocrat), R = sum(pct_estimate * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 5 & Year == 2022) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 2 & Year == 2022) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
unemp_today = inner_join(unemp_Q4_today, unemp_Q3_today, c("Year", "State and area"))
# Get the data specifically for today
today = unemp_today %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
rename(state = `State and area`) %>%
inner_join(polls_today, c("Year" = "year")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesPct = UnempPctChange,
DemTimesPolls = DemPolls)
polls_today
# Get the polls for today
polls_today = read_csv("data/538_generic_ballot_averages_2018-2022.csv") %>%
filter(month == 9 & cycle == 2022) %>%
mutate(isDemocrat = candidate == "Democrats") %>%
group_by(cycle) %>%
summarize(D = sum(pct_estimate * isDemocrat) / sum(isDemocrat), R = sum(pct_estimate * (1 - isDemocrat)) / sum(1 - isDemocrat)) %>%
mutate(DemPolls = D / (D + R))
# Read in the state unemployment data, filtering for the Q3 and Q4 numbers
unemp_Q4_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 5 & Year == 2022) %>%
rename(UnempQ4 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ4)
unemp_Q3_today = read_csv("data/unemployment_state_monthly.csv") %>%
filter(Month == 2 & Year == 2022) %>%
rename(UnempQ3 = Unemployed_prct) %>%
select(Year, `State and area`, UnempQ3)
unemp_today = inner_join(unemp_Q4_today, unemp_Q3_today, c("Year", "State and area"))
# Get the data specifically for today
today = unemp_today %>%
inner_join(filter(df_prev, raceYear == 2022), c("State and area" = "State")) %>%
rename(state = `State and area`) %>%
inner_join(polls_today, c("Year" = "cycle")) %>%
mutate(UnempPctChange = 100 * (UnempQ4 - UnempQ3) / UnempQ3,
DemTimesPct = UnempPctChange,
DemTimesPolls = DemPolls)
# Get the predictions given by this model
today$Predicted = data.frame(predict(model2, today, interval="prediction"))$fit
today$LowerBound = data.frame(predict(model2, today, interval="prediction"))$lwr
today$UpperBound = data.frame(predict(model2, today, interval="prediction"))$upr
# Plot a US map with the predictions
states = us_map()
plot_usmap(data=today, regions="states", values="Predicted") +
theme_void() +
scale_fill_gradient(low="white", high="blue", name="% of Votes", limits=range(30, 70)) +
ggtitle("Predicted Vote Share Achieved by Democrats, 2022 Election")
# Print the predictions and the prediction interval
print(data.frame(select(today, state, LowerBound, Predicted, UpperBound)), digits = 3)
df
filter(df, State == "Alabama")$DemPct
df %>% groupby(State) %>% summarize(n())
df %>% group_by(State) %>% summarize(n())
df %>% group_by(State) %>% summarize(n()) %>% print()
df %>% spread(State, DemPct)
df %>% spread(State, DemPct)
df %>% group_by(raceYear) %>% spread(State, DemPct)
df %>% group_by(raceYear) %>% spread(State, DemPct)
df %>% mutate(Diff = DemPct - Predicted2) %>% select(raceYear, State, Diff)
df %>% mutate(Diff = DemPct - Predicted2) %>% select(raceYear, State, Diff)
df %>% mutate(Diff = DemPct - Predicted2) %>% select(raceYear, State, Diff) %>% spread(State, Diff)
corr_df = df %>% mutate(Diff = DemPct - Predicted2) %>% select(raceYear, State, Diff) %>% spread(State, Diff)
corr_df
cor(corr_df)
cor(corr_df, na.rm=TRUE)
