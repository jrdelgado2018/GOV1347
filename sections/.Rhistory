# set working directory always
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
#options(repos = list(CRAN="http://cran.rstudio.com/"))
# required packages
require(tidyverse)
require(ggplot2)
require(sf)
## make map of vote share by state and CD
# start with 114th congress - 2014 election
# load geographic data
get_congress_map <- function(cong=114) {
tmp_file <- tempfile()
tmp_dir  <- tempdir()
zp <- sprintf("https://cdmaps.polisci.ucla.edu/shp/districts114.zip",cong)
download.file(zp, tmp_file)
unzip(zipfile = tmp_file, exdir = tmp_dir)
fpath <- paste(tmp_dir, sprintf("districtShapes/districts114.shp",cong), sep = "/")
st_read(fpath)
}
# load 114th congress
cd114 <- get_congress_map(114)
cd114
library(sf)
install.packages('sf')
install.packages("sf")
install.packages('sf')
install.packages('sf')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
# set working directory always
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
#options(repos = list(CRAN="http://cran.rstudio.com/"))
# required packages
require(tidyverse)
require(ggplot2)
require(sf)
## make map of vote share by state and CD
# start with 114th congress - 2014 election
# load geographic data
get_congress_map <- function(cong=114) {
tmp_file <- tempfile()
tmp_dir  <- tempdir()
zp <- sprintf("https://cdmaps.polisci.ucla.edu/shp/districts114.zip",cong)
download.file(zp, tmp_file)
unzip(zipfile = tmp_file, exdir = tmp_dir)
fpath <- paste(tmp_dir, sprintf("districtShapes/districts114.shp",cong), sep = "/")
st_read(fpath)
}
# load 114th congress
cd114 <- get_congress_map(114)
# select specific state
cd114_nj <- cd114 %>%
filter(STATENAME=="New Jersey") %>%
mutate(DISTRICT = as.character(DISTRICT))%>%
select(DISTRICT)
# add data to plot - 2014 GOP party seat share
# reload election data - h from previous exercise
h <- read_csv("data/house party vote share by district 1948-2020.csv")
# filter for 2014 election and state
R_nj_2014 <- h %>%
filter(raceYear == 2014, State == "New Jersey") %>%
select(raceYear, State, district_num, RepVotesMajorPercent, DemVotesMajorPercent) %>%
# summarize party vote share by district
group_by(district_num) %>%
summarise(Rep_votes_pct = RepVotesMajorPercent) %>%
# rename district variable name to match shapefile
rename(DISTRICT = district_num)
# before joining dfs, check classes of variable to be merged on
class(R_nj_2014$DISTRICT)
class(cd114_nj$DISTRICT)
# change class
cd114_nj$DISTRICT <- as.numeric(cd114_nj$DISTRICT)
# join election returns with shapefiles
cd114_nj <- cd114_nj %>% left_join(R_nj_2014, by="DISTRICT")
cd114_nj
# time to map!
cd114_nj %>% ggplot() +
geom_sf(aes(fill=Rep_votes_pct),
inherit.aes=FALSE,alpha=0.9) +
scale_fill_gradient(low = "white", high = "black", limits=c(10,80)) +
theme_void() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
## make map of GOP vote share by state (national) - 2014
# use h dataset from earlier
# house_party_vote_share_by_district_1948_2020 <-
# read_csv("house party vote share by district 1948-2020.csv")
# h <- house_party_vote_share_by_district_1948_2020
# filter for relevant variables
R_2014 <- h %>%
filter(raceYear == 2014) %>%
select(raceYear, State, district_num, district_id, RepVotes, DemVotes) %>%
# summarize party vote share by state
group_by(State) %>%
# mutate Rep vote margin by state %>%
mutate(R_votemargin_st = (sum(RepVotes))/
sum(RepVotes + DemVotes),
D_votemargin_st = (sum(DemVotes))/
sum(RepVotes + DemVotes)) %>%
rename(state = State)
# load usmap
# install.packages('plot_usmap')
library(usmap)
states_map <- usmap::us_map()
unique(states_map$abbr)
# plot
plot_usmap(data = R_2014, regions = "states", values = "R_votemargin_st") +
scale_fill_gradient(low = "white", high = "red", name = "GOP two-party voteshare margin") +
theme_void()
## map across all election years
# filter for relevant variables
R_all <- h %>%
select(raceYear, State, district_num, district_id, RepVotes, DemVotes) %>%
# summarize party vote share by state
group_by(State) %>%
# mutate Rep vote margin by state %>%
mutate(R_votemargin_st = (sum(RepVotes))/
sum(RepVotes + DemVotes),
D_votemargin_st = (sum(DemVotes))/
sum(RepVotes + DemVotes)) %>%
rename(state = State)
# plot
plot_usmap(data = R_all, regions = "states", values = "R_votemargin_st") +
facet_wrap(facets = raceYear ~.) +
scale_fill_gradient(low = "white", high = "red", name = "GOP two-party voteshare margin") +
theme_void()
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
df = read_csv("data/house seat share and vote share 2000-2002.csv")
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
df = read_csv("data/house seat share and vote share 2000-2002.csv")
getwd()
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
df = read_csv("data/house seat share and vote share 2000-2002.csv")
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
df = read_csv("data/house seat share and vote share 2000-2002.csv")
df
df
df = read.csv("data/house seat share and vote share 2000-2002.csv")
df
types(df)
coltypes(df)
df = read_csv("data/house seat share and vote share 2000-2002.csv")
df
data.frame(df)
nrow(df)
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>% data.frame()
df
nrow(df)
unique(df$RaceDate)
typeof(df$RaceDate)
df$RaceDate // 2000
df$RaceDate % 1000
df$RaceDate %% 1000
df$RaceDate %/% 1000
df$RaceDate %/% 10000
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>%
data.frame() %>%
mutate(RaceYear = RaceDate %/% 10000) # Extract year from YYYYMMDD integer
election_2002 = df %>% filter(RaceYear == 2002)
election_2000 = df %>% filter(RaceYear == 2000)
election_2002
election_2000
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>%
data.frame() %>%
mutate(RaceYear = RaceDate %/% 10000) # Extract year from YYYYMMDD integer
election_2002 = df %>% filter(RaceYear == 2002)
election_2000 = df %>% filter(RaceYear == 2000)
election_202
election_2002
election_2000
nrow(df)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
library(usmap)
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>%
data.frame() %>%
mutate(RaceYear = RaceDate %/% 10000) # Extract year from YYYYMMDD integer
election_2002 = df %>% filter(RaceYear == 2002)
election_2000 = df %>% filter(RaceYear == 2000)
head(election_2000)
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
library(usmap)
library(gridExtra)
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>%
data.frame() %>%
rename(state = Area) %>%
mutate(RaceYear = RaceDate %/% 10000) # Extract year from YYYYMMDD integer
election_2002 = df %>% filter(RaceYear == 2002)
election_2000 = df %>% filter(RaceYear == 2000)
head(election_2000)
us_map()
plot_map = function(df, colname, title, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label) +
ggtitle(title) +
theme_void()
}
plot_map(election_2000, 'RepVotesMajorPercent', 'test', 'test')
plot_map = function(df, colname, title, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label) +
ggtitle(title) +
theme_void()
return(plt)
}
plot_map(election_2000, 'RepVotesMajorPercent', 'test', 'test')
p = plot_map(election_2000, 'RepVotesMajorPercent', 'test', 'test')
p
head(election_2000)
election_2000
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
library(usmap)
library(gridExtra)
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "GOP Vote Share (%)")
p2 = plot_map(df, "RepSeatsMajorPercent", "GOP Seat Share (%)")
return(grid.arrange(p1, p2, ncol=2) + ggtitle(title))
}
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
library(usmap)
library(gridExtra)
# Read in the data and do a few minor manipulations
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>%
data.frame() %>%
rename(state = Area) %>%
mutate(RepSeatsMajorPercent = 100 * RepWinner / (RepWinner + DemWinner)) %>% # Create column for GOP seat %
mutate(DemSeatsMajorPercent = 100 * DemWinner / (DemWinner + RepWinner)) %>% # Same thing, for Democrats
mutate(RaceYear = RaceDate %/% 10000) # Extract year from YYYYMMDD integer
election_2002 = df %>% filter(RaceYear == 2002)
election_2000 = df %>% filter(RaceYear == 2000)
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "GOP Vote Share (%)")
p2 = plot_map(df, "RepSeatsMajorPercent", "GOP Seat Share (%)")
return(grid.arrange(p1, p2, ncol=2) + ggtitle(title))
}
p = both_maps(election_2000, "test")
?grid.arrange
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "GOP Vote Share (%)")
p2 = plot_map(df, "RepSeatsMajorPercent", "GOP Seat Share (%)")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title))
}
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "GOP Vote Share (%)")
p2 = plot_map(df, "RepSeatsMajorPercent", "GOP Seat Share (%)")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title)))
}
p = both_maps(election_2000, "test")
library(grid)
p = both_maps(election_2000, "test")
p
range(0, 100)
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
library(usmap)
library(grid)
library(gridExtra)
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=title))
}
p = both_maps(election_2000, "test")
?textGrob
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=-10)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=1)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=2)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=5)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=20)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=10)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=12)))
}
p = both_maps(election_2000, "test")
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=11)))
}
p = both_maps(election_2000, "test")
election_2000
# Set R Markdown settings and load necessary packages
knitr::opts_chunk$set(echo = TRUE, fig.align="center")
knitr::opts_knit$set(root.dir = "~/Desktop/GOV1347.nosync")
library(tidyverse)
library(sf)
library(usmap)
library(grid)
library(gridExtra)
# Read in the data and do a few minor manipulations
df = read_csv("data/house seat share and vote share 2000-2002.csv") %>%
data.frame() %>%
rename(state = Area) %>%
mutate(RepSeatsMajorPercent = 100 * RepWinner / (RepWinner + DemWinner)) %>% # Create column for GOP seat %
mutate(DemSeatsMajorPercent = 100 * DemWinner / (DemWinner + RepWinner)) %>% # Same thing, for Democrats
mutate(RaceYear = RaceDate %/% 10000) # Extract year from YYYYMMDD integer
election_2002 = df %>% filter(RaceYear == 2002)
election_2000 = df %>% filter(RaceYear == 2000)
# A function that will plot the US intensity map for a certain column (coloring states red, so assuming GOP data)
plot_map = function(df, colname, label) {
states = us_map()
plt = plot_usmap(data=df, regions="states", values=colname) +
scale_fill_gradient(low="white", high="red", name=label, limits=range(0, 100)) +
theme_void()
return(plt)
}
# A function that will plot both vote % and seat % side-by-side for easy comparison
both_maps = function(df, title) {
p1 = plot_map(df, "RepVotesMajorPercent", "% of Votes")
p2 = plot_map(df, "RepSeatsMajorPercent", "% of Seats")
return(grid.arrange(p1, p2, ncol=2, top=textGrob(title, vjust=11)))
}
p = both_maps(election_2008, "test")
p = both_maps(election_2000, "test")
